

# see https://github.com/linuxforum5/vg5000utils/blob/main/src/vg5000k72wav.c
# https://github.com/linuxforum5/vg5000utils/tree/main
# http://vg5000bazar.free.fr/html/articles/header_k7.htm

import numpy as np
import sounddevice as sd
import math, os

# transmission of a 0 bit:
# - high during t/2 s
# - low during t/2 s
# transmission of a 1 bit:
# - high during t/4 s
# - low during t/4 s
# 1200 bauds -> t = 800us = 0.0008s
# 2400 bauds -> t = 400us = 0.0004s


AMPLITUDE = 0.7
SAMPLERATE = 44100.0 # Hz
SAMPLEDT = 1.0 / SAMPLERATE;
NSAMPDIV4 = math.ceil(200.0 * SAMPLERATE * 1e-6)
NSAMPDIV2 = 2 * NSAMPDIV4
NSAMPPBIT = 4 * NSAMPDIV4
NSAMPPBYTE = 11 * NSAMPPBIT

NSAMPSILENCE = 4096

NLEADINGBITS = 2048
NSAMPLEADING = NLEADINGBITS * NSAMPPBIT

def set_bit_0(data, pos):
	p = pos
	for i in range(0, NSAMPDIV2):
		data[p] = AMPLITUDE
		p = p + 1
	for i in range(0, NSAMPDIV2):
		data[p] = 0
		p = p + 1
	return p

def set_bit_1(data, pos):
	p = pos
	for i in range(0,2):
		for j in range(0, NSAMPDIV4):
			data[p] = AMPLITUDE
			p = p + 1
		for j in range(0, NSAMPDIV4):
			data[p] = 0
			p = p + 1
	return p

def set_byte(data, pos, byte):
	p = pos
	p = set_bit_0(data, p)
	mask = 0x01
	for i in range(0, 8):
		if (byte & mask) == 0:
			p = set_bit_0(data, p)
		else:
			p = set_bit_1(data, p)
		mask = mask << 1
	p = set_bit_1(data, p)
	p = set_bit_1(data, p)
	return p

def set_silence(data, pos):
	p = pos
	for i in range(0, NSAMPSILENCE):
		data[p] = 0
		p = p + 1
	return p

def set_leading(data, pos):
	p = pos
	for i in range(0, 2048):
		p = set_bit_1(data, p)
	return p

#t = np.arange(0, 10, SAMPLEDT);
#d = AMPLITUDE * np.sin(2 * np.pi * FREQUENCY * t)
#print(len(t))
#sd.play(d, samplerate=SAMPLERATE, blocking=True, loop=False)

file = "blitz_vg5000.k7"
print("input = {}".format(file))

f = open(file, 'rb')
f.seek(0, os.SEEK_END)
size = f.tell()
f.seek(0, os.SEEK_SET)
print("size = {} bytes".format(size))

data_size = size * NSAMPPBYTE + 3 * NSAMPSILENCE + 2 * NSAMPLEADING
data = np.zeros(data_size, dtype=np.float32)
print("data_size = {}".format(data_size))

pos = set_silence(data, 0)
pos = set_leading(data, pos)

d = f.read(32)
l = len(d)
if l != 32:
	print("pb")
for i in range(0, l):
	pos = set_byte(data, pos, d[i])

pos = set_silence(data, pos)
pos = set_leading(data, pos)

while True:
	d = f.read(256)
	l = len(d)
	if l == 0:
		break
	else:
		for i in range(0, l):
			pos = set_byte(data, pos, d[i])

f.close()

pos = set_silence(data, pos)

print("pos = {}".format(pos))


sd.check_output_settings(samplerate=SAMPLERATE)
sd.play(data, samplerate=SAMPLERATE, blocking=True, loop=False)
